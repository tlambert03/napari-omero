# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/napari_omero", "src/omero/plugins"]

# https://peps.python.org/pep-0621/
[project]
name = "napari-omero"
dynamic = ["version"]
description = "napari/OMERO interoperability"
readme = "README.md"
requires-python = ">=3.7"
license = { text = "GPL-2.0-or-later" }
authors = [
    { name = "Talley Lambert", email = "talley.lambert@gmail.com" },
    { name = "Will Moore" },
    { name = "Johannes Soltwedel", email = "johannes_richard.soltwedel@tu-dresden.de},
    { name = "Peter Sobolewski},
]
keywords = ["OMERO.CLI", "plugin", "napari", "napari-plugin"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: X11 Applications :: Qt",
    "Framework :: napari",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    # "License :: OSI Approved :: BSD License",
    # "Typing :: Typed",
]
# add your package dependencies here
dependencies = [
    "napari>=0.4.13",
    "omero-py",
    "omero-rois",
    "importlib-metadata; python_version < '3.8'",
]

# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
# "extras" (e.g. for `pip install .[test]`)
[project.optional-dependencies]
all = ["napari[all]"]
# add dependencies used for testing here
test = [
    "pytest",
    "pytest-cov",
    "pytest-qt",
    "pytest-regressions",
    "pywin32; sys_platform == 'win32'",
]
# add anything else you like to have in your dev environment here
dev = [
    "black",
    "ipython",
    "mypy",
    "pdbpp",   # https://github.com/pdbpp/pdbpp
    "rich",    # https://github.com/Textualize/rich
    "ruff",
]

[project.urls]
homepage = "https://github.com/tlambert03/napari-omero"
repository = "https://github.com/tlambert03/napari-omero"

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# same as console_scripts entry point
[project.scripts]
napari-omero = "napari_omero.__main__:main"

[project.entry-points."napari.manifest"]
napari-omero = "napari_omero:napari.yaml"

# https://beta.ruff.rs/docs/rules/
[tool.ruff]
line-length = 88
target-version = "py37"
select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line should be in imperative mood
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
]

[tool.ruff.per-file-ignores]
"tests/*.py" = ["D", "S"]
"setup.py" = ["D"]

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = false
check_untyped_defs = true
ignore_missing_imports = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true


# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore:distutils Version classes are deprecated:",
    "ignore:the imp module is deprecated in:",
    "ignore:'U' mode is deprecated",
    "ignore:Please import PackageMetadata from 'npe2'",
    "ignore:`np.bool8` is a deprecated alias for `np.bool_`:DeprecationWarning:skimage",
]


# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
]
[tool.coverage.run]
source = ["src"]

# https://github.com/mgedmin/check-manifest#configuration
# add files that you want check-manifest to explicitly ignore here
# (files that are in the repo but shouldn't go in the package)
[tool.check-manifest]
ignore = [
    ".github_changelog_generator",
    ".pre-commit-config.yaml",
    ".ruff_cache/**/*",
    "setup.py",
    "tests/**/*",
]

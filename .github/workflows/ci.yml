name: CI

on: 
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:

  test:
    name: ${{ matrix.platform }} ${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.9, '3.10']
        backend: [pyqt5]
        include:
          - platform: ubuntu-latest
            python-version: 3.7
            backend: pyqt5

    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          channels: conda-forge
          channel-priority: strict
          python-version: ${{ matrix.python-version }}

      - uses: tlambert03/setup-qt-libs@v1

      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools tox tox-conda tox-gh-actions

      - name: Test with tox
        run: tox
        env:
          PLATFORM: ${{ matrix.platform }}
          PYTHON: ${{ matrix.python-version }}
          PYVISTA_OFF_SCREEN: True
          BACKEND: ${{ matrix.backend }}

      - name: Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true


  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your 
    needs: [test]
    if: github.repository == 'tlambert03/napari-omero' && contains(github.ref, 'tags')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U build twine
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
        run: |
          git tag
          python -m build
          twine check dist/*
          twine upload dist/*
